SPRING BOOT MICRO SERVICES - JAN-2021 - WEEKEND -BATCH
---------------------------------------------------
Day -1 
----------------------------------------------------
Configuring Lombok :

1. Download Lombak.jar from https://projectlombok.org/
2. run the jar file  java -jar lombok.jar
3. Paste the Reference of Your STS directory
4. It will update sprintoolsuite.ini file with javaagent
5. Restart the STS and use Lombok annotations on your class


LAB - 1

  Create a Eureka Registry Service 

  
=> DONE 1. Create a Spring Boot Starter Project with Web,Eureka Server
=> DONE 2. Add @EnableEurekaServer Annotation on the class with main method
=> Done 3. Create application.yml file by renaming application.properties 
           and add the requried configuration (portNumber , registerwith eureka                  ,fetchregistry,defaultzone)
4. Run the Application 
5. In the browser invoke http://localhost:8761 

LAB - 2
Create a Service to Register With Eureka 

    1. Create a Spring Boot Starter Project with web,eureka client and Lombok
    2. Add @EnableDiscoveryClient to the class with main method
    3. Create a Pojo Class
    4. Create a RestController
    5. Update application.yml
    6. Run and it will get Registered with Eureka 

Lab -3

    1. Create a Spring Boot Starter Project with web,eureka client and Lombok
    2. Add @EnableDiscoveryClient to the class with main method
    3. Register RestTemplate with @LoadBalanced
    4. Create RestController and autwire RestTemplate
    5. Use the RestTemplate xxxForObject Method and using the serviceid invoke the service
    6. Run and Check By Invoking the service.
  

Lab - 4

    1. Create a Spring Boot Starter Project with web,eureka client and Lombok
    2. Add @EnableDiscoveryClient to the class with main method
    3. Register RestTemplate WITHOUT @LoadBalanced
    4. Create RestController and autwire RestTemplate and LoadBalancerClient
    5. Use the LoadBalancerClient choose method and get reference of serviceInstance 
    6. Using service instance get the baseURL
    7. Use the RestTemplate xxxForObject Method and using the requestURL invoke the service
    6. Run and Check By Invoking the service.

Lab - 5
    1. Eureka Cluster - p2p
    2. Create a Spring Boot Starter Project with web and Eureka Server
    3. Add @EnableEurekaServer annotation to the class with main method
    4. In the the application.yml file create two profiles peer1 and peer2
    5. Add the requried configuration parameters like        applicationname,hostname,service-url
    6. update C:\Windows\System32\drivers\etc\hosts  file
    7. Run the Application in both the profile and observe the change in eureka               dashboard
    8. Create a Service and Register it with the instances and Observe the workings
====================================================================


Day -2
----------------------------------------------------

case 1 - Service registred with eureka then use RestTemplate with @LoadBalanced
case 2- Multiple instance of the service registred with eureka use Resttemplate with @LoadBalanced
case 3 - Multiple Instance of the service registred with eureka use LoadBalancerClient and RestTemplate without @LoadBalanced
case 4- Multiple instance of the service running without registring to eureka  then use @RibbonClient with custom configuration and Resttemplate with @LoadBalanced

Lab - 1   Ribbon Client Configuration

   1. Create a Rest API  and run multiple instance of it
   2. Create a Spring Boot Starter Project with web and ribbon
   3. Add @RibbonClient() to the class with main method
   4. Create a Class with @Configuraion away from the default component scan
   5. Register the Bean and add the required methods
   6. Use the RestTemplate with @LoadBalaned and run the application

Lab-  2  Spring Config Server
 
   1. Create a GitHUB Repository with some folder and application.yml
   2. Create a service with ConfigServer module 
   3. Add EnableConfigServer
   4. Create Service and add bootstrap.yml and application.yml 
   5. check it pulls the values from configserver


 Lab -3  

   1. create spring boot starter project with following dependecies
       web , lombok,config client,actuator,mysql-driver, data-jpa
   2. create a bootstrap.yml and application.yml

    

case 1 -> config server running independetly -> client application bootstrap.yml

case 2 -> config server registered eureka -> client application bootstrap.yml give service id

case 3. spring 2.4  server same, client application add cloud bootstrap module, no bootstrap.yml file just application.yml and the property is   config:
    import:
    - optional:configserver:http://localhost:8888

Lab -4  Creating Admin Server 

     1. Create Starter Project with admin Server
     2. Add @EnableAdminServer annotation
     3. Update the application.yml
     4. In the existing projects add admin client 
     5. update the application.yml and uri of admin server
     
-------------------------------------------------------------------------

Day -3  

  Lab -1  

  Done  1. Create a Spring Boot Starter Project with web,lombok,mysql,data jpa,actuator
  Done  2. Create a entity class , Repository, service,controller
  Done   3. Update the Application.yml => add info ,add actuator related config props
  Done  4. Check the Application
  Done     5. Add a AuditEvent Bean and observer
 Done    6. Use loggers endpoint and observe
 Done   7. Create a Custom End Point and check

 Lab - 2

   Done  1. On Project Done in Lab-1 Add Spring Security Module
   Done  2. Create a Configuration Class by extending WebSecurityConfigurerAdapter
   Done 3. Override the configure(HttpSecurity) and configure(AuthenticationManagerBuilder)
   Done 4. Add the InMemoryauhentication details 
   Done 5. Check the application
   Done 6. Set the Logging level and observe
   
        
Lab -3 

Done:     1. Create a Spring Starter Project with web,feign
Done:    2. Create Interface with @FeignClient
Done:     3. Add @EnableFiegnClients
Done:     4. Create a Configuration class with @Bean BasicAuthRequestInterceptor
Done:     5. Create a Controller wire the interface and call the methods


Lab-4 
1. Create Spring Boot Starter Project with following dependencis : web,lombok,actuator,oAuth2ResourceServer,cloud oauth

2.Create a Model Class 

3. Register Beans of the Model class and BctryptPasswordEncoder

4. Create a Rest Controller which returns the Model class Object

5. Try Executing and Calling the Rest Controller EndPoint and observe the Login form being shown

6. Add @EnableResourceServer annotation to the class with main method and observe
    It should throw an exception with => Full authentication is required to access this resource

7. Create a Java class SecurityConfig by extending WebSecurityConfigurerAdapter and 
   override the configure() method, and authenticationManagerBean() methods

8  AutoWire  PasswordEncoder Bean 

9.Create a Configuration Class by Extending  AuthorizationServerConfigurerAdapter 
10 Add the annotation @Configuration and @EnableAuthorizationServer

11.AutoWrite AuthenticationManager and PasswordEncode

12 Override all three configure methods

14 Run the Application 

15. Use the postman and make a Post Request with http://localhost:8080/oauth/token
    pass the basicauthentication details and paramters like grant_type      username,password

16. Onsuccessful execution should get the token

17 Use the token to make the call to the Hospital Controller and view the response

    







https://github.com/vatsanTraining/spring_jan_2021
https://github.com/vatsank/spring_presentations

